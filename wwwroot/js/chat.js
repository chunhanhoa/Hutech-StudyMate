class StudyChatBot {
    constructor() {
        this.currentStudyData = null;
        this.inlineChatSection = null;
        this.inlineMessagesContainer = null;
        this.inlineChatInput = null;
        this.inlineSendButton = null;
        this.chatHistory = [];
        this.isFirstInteraction = true; // Th√™m flag ƒë·ªÉ theo d√µi l·∫ßn ƒë·∫ßu
        this.init();
    }

    init() {
        this.setupInlineChat();
        this.attachEventListeners();
    }

    setupInlineChat() {
        this.inlineChatSection = document.getElementById('aiChatSection');
        this.inlineMessagesContainer = document.getElementById('chatMessagesInline');
        this.inlineChatInput = document.getElementById('chatInputInline');
        this.inlineSendButton = document.getElementById('chatSendInline');
    }

    attachEventListeners() {
        if (this.inlineSendButton) {
            this.inlineSendButton.addEventListener('click', () => this.sendMessage());
        }
        
        if (this.inlineChatInput) {
            this.inlineChatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }
    }

    updateStudyData(data) {
        this.currentStudyData = data;
        
        // ƒê·∫£m b·∫£o chatbot inline ƒë∆∞·ª£c hi·ªÉn th·ªã
        if (this.inlineChatSection) {
            this.inlineChatSection.classList.remove('hidden');
        }
        
        if (data && data.grades && data.grades.length > 0) {
            // X√≥a tin nh·∫Øn c≈© v√† th√™m tin nh·∫Øn ch√†o m·ª´ng m·ªõi
            if (this.inlineMessagesContainer) {
                this.inlineMessagesContainer.innerHTML = '';
                this.chatHistory = [];
                this.isFirstInteraction = true; // Reset flag khi c√≥ d·ªØ li·ªáu m·ªõi
            }
            
            this.addMessage(`üìä ƒê√£ ph√¢n t√≠ch xong b·∫£ng ƒëi·ªÉm!

T√¥i th·∫•y b·∫°n ƒë√£ h·ªçc ${data.grades.length} m√¥n, GPA hi·ªán t·∫°i ${data.summary.gpa4 ? data.summary.gpa4.toFixed(2) : 'N/A'}/4.0.

üí° H·ªèi t√¥i v·ªÅ:
‚Ä¢ "T√¥i c√≤n thi·∫øu nh·ªØng m√¥n n√†o ƒë·ªÉ t·ªët nghi·ªáp?"
‚Ä¢ "L√†m sao ƒë·ªÉ c·∫£i thi·ªán GPA?"  
‚Ä¢ "N√™n ƒëƒÉng k√Ω m√¥n g√¨ k·ª≥ t·ªõi?"
‚Ä¢ "12 TC t·ª± ch·ªçn th√¨ n√™n ch·ªçn h∆∞·ªõng n√†o?"

H√£y ƒë·∫∑t c√¢u h·ªèi cho tui nh√©! üòä`, 'ai');
        }
    }

    async sendMessage() {
        const message = this.inlineChatInput.value.trim();
        if (!message) return;

        this.addMessage(message, 'user');
        this.inlineChatInput.value = '';
        this.inlineSendButton.disabled = true;

        const typingId = this.addTypingIndicator();

        try {
            const response = await fetch('/api/chat/ask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: message,
                    studyData: this.currentStudyData,
                    chatHistory: this.chatHistory.slice(-6),
                    isFirstInteraction: this.isFirstInteraction // G·ª≠i flag l·∫ßn ƒë·∫ßu
                })
            });

            this.removeTypingIndicator(typingId);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            this.addMessage(data.response, 'ai');
            
            // ƒê√°nh d·∫•u kh√¥ng c√≤n l√† l·∫ßn ƒë·∫ßu n·ªØa
            this.isFirstInteraction = false;

        } catch (error) {
            this.removeTypingIndicator(typingId);
            this.addMessage('‚ùå **L·ªói k·∫øt n·ªëi**\n\nXin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.', 'ai');
            console.error('Chat error:', error);
        } finally {
            this.inlineSendButton.disabled = false;
            this.inlineChatInput.focus();
        }
    }

    // Function ƒë·ªÉ convert markdown **text** th√†nh HTML bold
    formatMessage(content) {
        if (!content) return '';
        
        // Convert **text** th√†nh <strong>text</strong>
        return content.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    }

    addMessage(content, type) {
        const container = this.inlineMessagesContainer;
        if (!container) return;

        // Format message ƒë·ªÉ convert **text** th√†nh bold
        const formattedContent = this.formatMessage(content);

        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message`;
        messageDiv.innerHTML = `
            <div class="message-content">${formattedContent}</div>
        `;
        container.appendChild(messageDiv);
        
        // L∆∞u v√†o l·ªãch s·ª≠ chat
        this.chatHistory.push({ role: type === 'user' ? 'user' : 'assistant', content: content });
        
        // Gi·ªõi h·∫°n l·ªãch s·ª≠ chat (ch·ªâ gi·ªØ 10 tin nh·∫Øn g·∫ßn nh·∫•t)
        if (this.chatHistory.length > 10) {
            this.chatHistory = this.chatHistory.slice(-10);
        }
        
        this.scrollToBottom();
    }

    addTypingIndicator() {
        const container = this.inlineMessagesContainer;
        if (!container) return Date.now();

        const typingId = Date.now();
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message ai-message typing';
        typingDiv.id = `typing-${typingId}`;
        typingDiv.innerHTML = `
            <div class="message-content">
                <div class="typing-dots">
                    <span></span><span></span><span></span>
                </div>
            </div>
        `;
        container.appendChild(typingDiv);
        this.scrollToBottom();
        return typingId;
    }

    removeTypingIndicator(typingId) {
        const typingElement = document.getElementById(`typing-${typingId}`);
        if (typingElement) {
            typingElement.remove();
        }
    }

    scrollToBottom() {
        const container = this.inlineMessagesContainer;
        if (container) {
            container.scrollTop = container.scrollHeight;
        }
    }
}

// Initialize chatbot
const studyChatBot = new StudyChatBot();

// Export for use in main app
window.studyChatBot = studyChatBot;
